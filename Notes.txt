-> HTML - Hypertext Markup Language

- Used to structure content on a web page (images, text, forms etc)
- We structure content using HTML tags

Some have both opening and closing tags like "<p></p>" and some have only opening tags <img>

-> CSS - Cascading Style Sheets

- works alongside HTML
- Used to style web pages to make them look better
 - Change colours, position, effects, font sizes etc


 - index.html is the kind of like the default home page, when you run your website on the browser it looks for this file
 - HTTP is the protocol we use to communicate with the servers to view websites

-> Tags
 - <strong> the text becomes bold
 - <em> makes the text italic
 - <small> makes the text smaller
 - heading tags (h1 is biggest and h6 is the smallest) - size for texts
 - ul - unordered list, it is a wrapper for <li> tags 
 - ol - ordered list, it will be numbered
 - <div> - division, divide the content into sections or group elements that belong together
 - <br> - it breaks the line and it doesn't have closing tags
 - <hr> - horizontal rule, it adds a line at that place
 - <img src="" alt=""> - an image tag with attributes src(source) which gives path to image and alt which gives details of the image
 - <a href=""> - anchor tag with href attribute. Anchor tag is used for navigation and href(hyperlink reference) gives the path
 - <blockquote cite=""> - blockquote is used to quote something from somewhere
                        - cite is an attribute which tells the source of the quote
                        - it indents a little bit from the right of the page


-> HTML forms
    - <form action=""> tag to create a form, action is used in server side programming
    - <input type="text" id="username" name=" "> - taking text input from the user, id should we unique ie username can't be the id of any other element. Id can be used for other tags too and not only forms
    - id can be used to identify the element or as a hook in CSS or JavaScript
    - <label for="id"> - gives label for the input field, id comes inside the for attribute
    - name attribute is mainly used for server side programming but it can also be used for grouping together certain elements like radio buttons etc
    - RADIO BUTTONS: in radio buttons if the names of all buttons are same then we can only choose one among them but if they are different we can choose multiple buttons
        - radio button has also an option called value which will be sumbitted when we submit the form
            ex: <input type="radio" name="name1" value="val">
    - <select> - for dropdown menuu and each option will be inside the option tag of select
    - <textarea> - used when we have a long text which isn't suitable to fit inside a text input, can be expanded
    - placeholder attribute can be added to give hint to what needs to be written inside an input
    - if there is any required input then add the required attribute

CSS
-> Style sheet - a list of CSS rules/rule sets
    - it contains of selectors and declarations
        - selectors -  these are html tags, classes, sections etc.
        - declarations - the key-value pairs inside flower braces which sets properties or rules for selectors
- adding css to html
    1. adding style tag inside the head of each html page - not efficient when many pages are there
    2. Create a separate stylesheet and link the pages to this sheet inside the head
    3. <link rel="stylesheet" href=""> - used to link html pages to css. rel attribute is for the relation between the files
- css web safe font - w3schools
- line-height: vertical length between each lines
- letter-spacing: space between each letter
- column-count: specify the number and the content will be divided into that many number of columns
- column-gap: the gap between the columns
- border-width: the width of the border around the elements
- border-style: style of the border
- here border has multiple properties and since it is about border we can have them in a single line instead of multiple different lines

-> List
    - list-style-type: the circle side of list and by default they are known as disc
    - text-shadow : takes in 3 values, offset to right of shadow, in vertical direction and the color of shadow

- Inline elements: 
    - Don't take up any more room than their content needs
    - span, img, strong, em, a and more
    - default of any element is Inline
    - to make this block give css property as display:block;

- Block-level Elements:
    - Take up the whole width of a page regardless of content
    - p,div,h1,h2,u,li and more
    - each starts on a new line
    - to make it inline give css property as display:inline;

- block-level elements can have margin around the element but in inline margin will only be on the right and left and not on top and below
- display: inline-block ; is better as it will give both properties

-> CSS Classes and selectors
    - when there are multiple similar tags and we want to apply style to just one of them then we have to assign a class to that particular tag
    - in css we define a class by .classname and then assign the properties
    - if there are multiple different tags with similar classname then if we want to apply a specific style to a particular tag
            tag.classname{

            }
    - if we want to assign multiple classes inside one tag the we could add them inside the "" ie <p class = "class1 class2 class3">
    - to access multiple classes in css => tag.class1.class2{
                                            
                                            }
    - id hooks
        - they are unique so no other id can have the same value in the same page
        - to access id in css => #id{} or tag#id{}
    
    - when you want to access tags of a particular parent(ex:div) and not any other tags in CSS
            parent tag{}, parent child1_tag child2_tag{}, div .classname{}
    
    - to find all tags with similar attribue in css => tag[attribute]{}

    - tag[attribute=value]{properties} => here we look for all tags with the attribute mention in square bracket and the attribute with those values
        - tag[attribute*=value] => all attributes in tag which includes the value in it will be styled
        - tag[attribute$=value] => all attributes in tag which ends with the value in it will be styled

- **The Cascade
    - Inheritance
        - HTML elements can inherit CSS properties that are applied to their parents 
        - when we apply certain styles to the parent tag, the child tags also inherit them not all but some
        - if we want those child tags who do not inherit those properties to inherit them below the parent style 
                child_tag{
                    property:inherit;
                }
            Here, we mention the properties which we want the child tag to inherit from the parent tag and then it is inherited
        - when we define multiple tags the one that is defined last will be the most specific one and the properties in that would be applied

- HTML 5 Semantics
 - <main> - for the main content of a webpage, unique to that page
 - <section> - defines a certain section of a webpage(e.g blog list, contact info)
 - <article> - defines a bit of content which makes up an article(e.g a blog post)
 - <aside> - defines some content related to something else (e.g similar blogs)
 - <header> - for the header of a website - contains the nav, title, etc
 - <footer> - for the footer of a website

-> Position & Layout
    - Static - default order, normal document flowe
    - Relative - relative to its original position
    - Fixed - relative to view port ie the top just below search, even when we scroll down the position doesn't change and continues to remain wherever it was designed
    - Absolute - relatively to its closest parent
    - Sticky - a mixture of Static and Fixed. Scroll till it like static and after it goes up it stays as fixed on view port

- z-index -> all elements have a z-index 0. If we give a value greater than 0 to z-index property of any element that element will be pushed to front
- whitespace:nowrap - when we give this to a parent element and then give inline-block nothing goes to next line 
- box-sizing:border-box; - used when we have given max-width as 100% and a padding of some value. When we compress the content would get expanded to the padding. To include padding along with max-width we use this

** PSEUDO Classes
- Style elements when they're in particular state
    - hover, focus, first child of a parent
    - valid: HTML 5 comes with some inbuilt validation. valid helps in checking if the value is valid and if yes changes are made to the element
    - first-child: when we want to style the first child of a parent alone
    - pseudo classes link - https://www.w3schools.com/css/css_pseudo_classes.asp

** PSEUDO Elements
- Difference is that pseudo elements help in injecting dynamic contents.


********* RESPONSIVE DESIGN ***********
- MEDIA QUERIES -> Tell the browser how to style an element at particular viewport dimensions
- Viewport meta tag -> Tells the browser what width the viewport should be
- Responsive images -> Only load smaller images for mobile devices
- Mobile-First approach - We should plan the website for a smaller size first and the adapt to larger screens
    - Fits less on them so only important ones are inserted
    - Much easier 



*********** HTML 5 TAGS *****************

HTML5 introduces more descriptive HTML tags.
They are:
    main - it helps search engines and other developers find the main content of your page
    header -
    footer -
    nav - 
    video - 
    article - 
    section - 



target="_blank" is used to open any link in new tab

-> Link to internal sections of the page with anchor elements
We can do this by giving an id to any tag ie <h1 id=""> and to go to this section from an anchor tag
<a href="#id"/>


**** Turning image to a line
    This can be done by nesting the img inside the anchor tag and also to turn the href to dead put the link as "#"
    Ex: <a href="#"><img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg" alt="Three kittens running towards the camera."></a>


    To keep a checkbox or radio box checked by default add the attribute "checked" in the input tag

    https://fonts.google.com/
    Google Fonts is a free library of web fonts that you can use in your CSS by referencing the font's URL.


** There are several default fonts that are available in all browsers. These generic font families include monospace, serif, and sans-serif. When
    one of them isn't available, we can tell browser to degrade to another font
    Ex: font-family: Helvetica, sans-serif;


**  To apply multiple classes to an element using its class attribute, by separating each class name with a space
    <img class="class1 class2">

However, an id is not reusable and should only be applied to one element. An id also has a higher specificity (importance) 
than a class so if both are applied to the same element and have conflicting styles, the styles of the id will be applied.

** padding: top right bottom left;

** In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an 
element has specific CSS, you can use !important.

** To create a CSS property
    - Inside a CSS selector create the property. To create such a property we should declare it using (--) ie --property-name
    - Now if we want to use this property as a value for another property we have to enclose this property inside bracket surrounded with var keyword
    Ex: 
    h1 {
        --property-name : value;
    }
    h5 {
        property: var(--property-name)
    }

    The above can have a fallback value that is if there is any problem with displaying that value then the fallback value will work

    ie property: var(--property-name, value)


** To make use of inheritance, CSS variables are often defined in the :root element.
    - :root is a pesudo-class selector that matches the root element of the document, usually the html element.
    - By creating your variables in :root, they will be available globally and can be accessed from any other selector in style sheet